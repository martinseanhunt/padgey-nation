// Code generated by Prisma (prisma@1.18.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  listItem: (where?: ListItemWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  listItem: (where: ListItemWhereUniqueInput) => ListItem;
  listItems: (
    args?: {
      where?: ListItemWhereInput;
      orderBy?: ListItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ListItemNode>;
  listItemsConnection: (
    args?: {
      where?: ListItemWhereInput;
      orderBy?: ListItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ListItemConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createListItem: (data: ListItemCreateInput) => ListItem;
  updateListItem: (
    args: { data: ListItemUpdateInput; where: ListItemWhereUniqueInput }
  ) => ListItem;
  updateManyListItems: (
    args: { data: ListItemUpdateInput; where?: ListItemWhereInput }
  ) => BatchPayload;
  upsertListItem: (
    args: {
      where: ListItemWhereUniqueInput;
      create: ListItemCreateInput;
      update: ListItemUpdateInput;
    }
  ) => ListItem;
  deleteListItem: (where: ListItemWhereUniqueInput) => ListItem;
  deleteManyListItems: (where?: ListItemWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  listItem: (
    where?: ListItemSubscriptionWhereInput
  ) => ListItemSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ListItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ListItemCreateInput {
  title: String;
}

export interface ListItemUpdateInput {
  title?: String;
}

export interface ListItemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  AND?: ListItemWhereInput[] | ListItemWhereInput;
  OR?: ListItemWhereInput[] | ListItemWhereInput;
  NOT?: ListItemWhereInput[] | ListItemWhereInput;
}

export interface ListItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ListItemWhereInput;
  AND?: ListItemSubscriptionWhereInput[] | ListItemSubscriptionWhereInput;
  OR?: ListItemSubscriptionWhereInput[] | ListItemSubscriptionWhereInput;
  NOT?: ListItemSubscriptionWhereInput[] | ListItemSubscriptionWhereInput;
}

export type ListItemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface ListItemEdgeNode {
  cursor: String;
}

export interface ListItemEdge extends Promise<ListItemEdgeNode>, Fragmentable {
  node: <T = ListItem>() => T;
  cursor: () => Promise<String>;
}

export interface ListItemEdgeSubscription
  extends Promise<AsyncIterator<ListItemEdgeNode>>,
    Fragmentable {
  node: <T = ListItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ListItemPreviousValuesNode {
  id: ID_Output;
  title: String;
}

export interface ListItemPreviousValues
  extends Promise<ListItemPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface ListItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ListItemPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface ListItemSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ListItemSubscriptionPayload
  extends Promise<ListItemSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ListItem>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ListItemPreviousValues>() => T;
}

export interface ListItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ListItemSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ListItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ListItemPreviousValuesSubscription>() => T;
}

export interface ListItemNode {
  id: ID_Output;
  title: String;
}

export interface ListItem extends Promise<ListItemNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface ListItemSubscription
  extends Promise<AsyncIterator<ListItemNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface ListItemConnectionNode {}

export interface ListItemConnection
  extends Promise<ListItemConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ListItemEdgeNode>>() => T;
  aggregate: <T = AggregateListItem>() => T;
}

export interface ListItemConnectionSubscription
  extends Promise<AsyncIterator<ListItemConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ListItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateListItemSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateListItemNode {
  count: Int;
}

export interface AggregateListItem
  extends Promise<AggregateListItemNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateListItemSubscription
  extends Promise<AsyncIterator<AggregateListItemNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Type Defs
 */

export const prisma: Prisma;
